---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: lemmy
  namespace: lemmy
spec:
  interval: 15m
  chart:
    spec:
      chart: ./charts/lemmy
      version: 0.4.5
      sourceRef:
        kind: GitRepository
        name: lemmy
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    timeout: 20m
    remediation:
      retries: 10
  upgrade:
    cleanupOnFail: true
    timeout: 30m
    remediation:
      retries: 10
  uninstall:
    keepHistory: false
  valuesFrom:
    - targetPath: smtp.password
      kind: Secret
      name: lemmy-secret
      valuesKey: smtp_password
    - targetPath: admin.password
      kind: Secret
      name: lemmy-secret
      valuesKey: admin_password
    - targetPath: pictrs.apiKey
      kind: Secret
      name: lemmy-secret
      valuesKey: pictrs_api_key
    - targetPath: postgresql.auth.password
      kind: Secret
      name: lemmy-secret
      valuesKey: postgresql_password
    - targetPath: psotgresql.auth.postgresPasword
      kind: Secret
      name: lemmy-secret
      valuesKey: postgresql_postgres_user_password
    - targetPath: config.siteName
      kind: Secret
      name: lemmy-secret
      valuesKey: site_name
  values:
    image:
      repository: dessalines/lemmy
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      #tag: latest

    ## The domain of the Lemmy instance
    serverName: "lemmy.${SECRET_DOMAIN}"

    smtp:
      server: "smtp.sendgrid.net:587"
      username: apikey
      # password:
      from: "lemmy-noreply@${SECRET_DOMAIN}"
      tls: starttls

    admin:
      username: jax-admin
      ## Will be generated on first install if left empty
      # password:
      email: "jax-admin@${SECRET_DOMAIN}"

    config:
      # siteName: Lemmy on Kubernetes
      ## Requires valid certificates, but is also required for federation support
      tls: true

    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""

    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    backend:
      image:
        _keep: true
        repository: dessalines/lemmy
        pullPolicy: IfNotPresent
        tag: 0.18.5

      env:
        RUST_BACKTRACE: "full"
        RUST_LOG: "warn,lemmy_server=info,lemmy_api=info,lemmy_api_common=info,lemmy_api_crud=info,lemmy_apub=info,lemmy_db_schema=info,lemmy_db_views=info,lemmy_db_views_actor=info,lemmy_db_views_moderator=info,lemmy_routes=info,lemmy_utils=info,lemmy_websocket=info"

      envFrom:
        # - secretRef:
        #    name: my-extra-secrets

      replicaCount: 1

      livenessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 30
        periodSeconds: 3

      readinessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 30
        periodSeconds: 3

      startupProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 120
        periodSeconds: 3

      podAnnotations: {}

      podSecurityContext:
        fsGroup: 1004

      securityContext:
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        runAsUser: 1004

      service:
        type: ClusterIP
        port: 80

      # resources:
      #   limits:
      #     cpu: 500m
      #     memory: 500Mi
      #   requests:
      #     cpu: 200m
      #     memory: 200Mi

      nodeSelector: {}

      tolerations: []

      affinity: {}

    frontend:
      image:
        repository: dessalines/lemmy-ui
        pullPolicy: IfNotPresent
        tag: 0.18.5

      replicaCount: 1

      env:
        LEMMY_UI_DEBUG: false
        RUST_BACKTRACE: "1"

      envFrom:
        # - secretRef:
        #    name: my-extra-secrets

      podAnnotations: {}

      podSecurityContext:
        fsGroup: 1004

      securityContext:
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        runAsUser: 1004

      service:
        type: ClusterIP
        port: 80

      # resources:
      #   limits:
      #     cpu: 250m
      #     memory: 250Mi
      #   requests:
      #     cpu: 100m
      #     memory: 100Mi

      nodeSelector: {}

      tolerations: []

      affinity: {}

    pictrs:
      replicaCount: 1

      ## Generated on first install if left empty
      # apiKey:

      storage:
        ## Storage method for media, can be filesystem or object_storage
        method: filesystem

        objectStorage:
          ## For self-hosted S3
          # endpoint: https://minio.example.com
          usePathStyle: false

          # bucketName: lemmy-pictrs
          # region:
          # accessKey:
          # secretKey:
          # sessionToken:

          # existingSecret: pictrs-secret
          # existingSecretAccessKey: access-key
          # existingSecretSecretKey: secret-key

      env:
        PICTRS__MEDIA__VIDEO_CODEC: vp9
        PICTRS__MEDIA__GIF__MAX_WIDTH: 256
        PICTRS__MEDIA__GIF__MAX_HEIGHT: 256
        PICTRS__MEDIA__GIF__MAX_AREA: 65536
        PICTRS__MEDIA__GIF__MAX_FRAME_COUNT: 400
        RUST_BACKTRACE: "1"

      envFrom:
        # - secretRef:
        #    name: my-extra-secrets

      image:
        repository: asonix/pictrs
        pullPolicy: IfNotPresent
        tag: 0.4.0-beta.19

      ## Used by both the sled database and also media itself if using the filesystem storage method
      persistence:
        enabled: true
        accessMode: ReadWriteOnce
        size: 16Gi
        existingClaim: "lemmy-data-pictrs-storage-0"
        storageClass: nfs-client

      podAnnotations: {}

      podSecurityContext:
        fsGroup: 1004

      securityContext:
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        runAsUser: 1004

      service:
        type: ClusterIP
        port: 80

      # resources:
      #   limits:
      #     cpu: 100m
      #     memory: 250Mi
      #   requests:
      #     cpu: 50m
      #     memory: 150Mi

      nodeSelector: {}

      tolerations: []

      affinity: {}

    proxy:
      enabled: true
      replicaCount: 1

      image:
        repository: nginx
        pullPolicy: Always
        tag: 1-alpine

      podAnnotations: {}

      podSecurityContext:
        {}
        # fsGroup: 2000

      securityContext:
        {}
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000

      service:
        type: ClusterIP
        port: 80

      # resources:
      #   limits:
      #     cpu: 100m
      #     memory: 100Mi
      #   requests:
      #     cpu: 50m
      #     memory: 50Mi

      nodeSelector: {}

      tolerations: []

      affinity: {}

    postgresql:
      enabled: true
      # host:
      image:
        debug: true
      auth:
        username: lemmy
        database: lemmy
        # password:
      service:
        port: 5432
      primary:
        extraEnvVars:
          - name: POSTGRES_MAX_CONNECTIONS
            value: "500"
        persistence:
          enabled: true
          storageClass: nfs-client
          existingClaim: "lemmy-data-postgres-storage-0"
        volumePermissions:
          enabled: true
        containerSecurityContext:
          runAsUser: 1004
        livenessProbe:
          initialDelaySeconds: 60
        readinessProbe:
          initialDelaySeconds: 60
        # resources:
        #   limits:
        #     cpu: 1200m
        #     memory: 4Gi
        #   requests:
        #     cpu: 600m
        #     memory: 2Gi
      metrics:
        containerSecurityContext:
          enabled: true
          runAsUser: 1004
        enabled: true
        serviceMonitor:
          enabled: true
        prometheusRule:
          enabled: true

    ingress:
      enabled: true
      className: "nginx"
      annotations:
        # kubernetes.io/ingress.class: nginx
        external-dns.alpha.kubernetes.io/target: "ingress.${SECRET_DOMAIN}"
        hajimari.io/icon: simple-icons:lemmy
        # kubernetes.io/tls-acme: "true"
      hosts:
        - "lemmy.${SECRET_DOMAIN}"
      tls:
        - secretName: letsencrypt-production
          hosts:
            - "lemmy.${SECRET_DOMAIN}"
